{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","TweetBox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","Post","forwardRef","ref","alt","fontSize","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","key","Widgets","tweetId","sourceType","screenName","options","height","url","via","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa8ffbb6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SidebarOption.css\";\n\nfunction SidebarOption({ active, text, Icon }) {\n  return (\n    <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\n      <Icon />\n      <h2>{text}</h2>\n    </div>\n  );\n}\n\nexport default SidebarOption;\n","import React from \"react\";\nimport \"./Sidebar.css\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport SidebarOption from \"./SidebarOption\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { Button } from \"@material-ui/core\";\n\nfunction Sidebar() {\n\treturn (\n\t\t<div className='sidebar'>\n\t\t\t<TwitterIcon className='sidebar__twitterIcon' />\n\n\t\t\t<SidebarOption active Icon={HomeIcon} text='Home' />\n\t\t\t<SidebarOption Icon={SearchIcon} text='Explore' />\n\t\t\t<SidebarOption Icon={NotificationsNoneIcon} text='Notifications' />\n\t\t\t<SidebarOption Icon={MailOutlineIcon} text='Messages' />\n\t\t\t<SidebarOption Icon={BookmarkBorderIcon} text='Bookmarks' />\n\t\t\t<SidebarOption Icon={ListAltIcon} text='Lists' />\n\t\t\t<SidebarOption Icon={PermIdentityIcon} text='Profile' />\n\t\t\t<SidebarOption Icon={MoreHorizIcon} text='More' />\n\n\t\t\t<Button variant='outlined' className='sidebar__tweet' fullWidth>\n\t\t\t\tTweet\n\t\t\t</Button>\n\t\t</div>\n\t);\n}\n\nexport default Sidebar;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n\tapiKey: \"AIzaSyAWiWziw3NrTCkpQqlFccd7qU2Cltfnm98\",\n\tauthDomain: \"twitter-ec99c.firebaseapp.com\",\n\tprojectId: \"twitter-ec99c\",\n\tstorageBucket: \"twitter-ec99c.appspot.com\",\n\tmessagingSenderId: \"266812276098\",\n\tappId: \"1:266812276098:web:89a2041e6fce3a0541a39b\",\n\tmeasurementId: \"G-TK1R3VEGCT\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useState } from \"react\";\nimport \"./TweetBox.css\";\nimport { Avatar, Button } from \"@material-ui/core\";\nimport db from \"./firebase\";\n\nfunction TweetBox() {\n\tconst [tweetMessage, setTweetMessage] = useState(\"\");\n\tconst [tweetImage, setTweetImage] = useState(\"\");\n\n\tconst sendTweet = (e) => {\n\t\te.preventDefault();\n\n\t\tdb.collection(\"posts\").add({\n\t\t\tdisplayName: \"Subham Char\",\n\t\t\tusername: \"charvai\",\n\t\t\tverified: true,\n\t\t\ttext: tweetMessage,\n\t\t\timage: tweetImage,\n\t\t\tavatar:\n\t\t\t\t\"https://pbs.twimg.com/profile_images/1472509955253043204/ormX-ZON_400x400.jpg\",\n\t\t});\n\n\t\tsetTweetMessage(\"\");\n\t\tsetTweetImage(\"\");\n\t};\n\n\treturn (\n\t\t<div className='tweetBox'>\n\t\t\t<form>\n\t\t\t\t<div className='tweetBox__input'>\n\t\t\t\t\t<Avatar src='https://pbs.twimg.com/profile_images/1472509955253043204/ormX-ZON_400x400.jpg' />\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(e) => setTweetMessage(e.target.value)}\n\t\t\t\t\t\tvalue={tweetMessage}\n\t\t\t\t\t\tplaceholder=\"What's happening?\"\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<input\n\t\t\t\t\tvalue={tweetImage}\n\t\t\t\t\tonChange={(e) => setTweetImage(e.target.value)}\n\t\t\t\t\tclassName='tweetBox__imageInput'\n\t\t\t\t\tplaceholder='Optional: Enter image URL'\n\t\t\t\t\ttype='text'\n\t\t\t\t/>\n\n\t\t\t\t<Button\n\t\t\t\t\tonClick={sendTweet}\n\t\t\t\t\ttype='submit'\n\t\t\t\t\tclassName='tweetBox__tweetButton'>\n\t\t\t\t\tTweet\n\t\t\t\t</Button>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nexport default TweetBox;\n","import React, { forwardRef } from \"react\";\nimport \"./Post.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport PublishIcon from \"@material-ui/icons/Publish\";\n\nconst Post = forwardRef(\n  ({ displayName, username, verified, text, image, avatar }, ref) => {\n    return (\n      <div className=\"post\" ref={ref}>\n        <div className=\"post__avatar\">\n          <Avatar src={avatar} />\n        </div>\n        <div className=\"post__body\">\n          <div className=\"post__header\">\n            <div className=\"post__headerText\">\n              <h3>\n                {displayName}{\" \"}\n                <span className=\"post__headerSpecial\">\n                  {verified && <VerifiedUserIcon className=\"post__badge\" />} @\n                  {username}\n                </span>\n              </h3>\n            </div>\n            <div className=\"post__headerDescription\">\n              <p>{text}</p>\n            </div>\n          </div>\n          <img src={image} alt=\"\" />\n          <div className=\"post__footer\">\n            <ChatBubbleOutlineIcon fontSize=\"small\" />\n            <RepeatIcon fontSize=\"small\" />\n            <FavoriteBorderIcon fontSize=\"small\" />\n            <PublishIcon fontSize=\"small\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Post;\n","import React, { useState, useEffect } from \"react\";\nimport TweetBox from \"./TweetBox\";\nimport Post from \"./Post\";\nimport \"./Feed.css\";\nimport db from \"./firebase\";\nimport FlipMove from \"react-flip-move\";\n\nfunction Feed() {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"posts\").onSnapshot((snapshot) =>\n      setPosts(snapshot.docs.map((doc) => doc.data()))\n    );\n  }, []);\n\n  return (\n    <div className=\"feed\">\n      <div className=\"feed__header\">\n        <h2>Home</h2>\n      </div>\n\n      <TweetBox />\n\n      <FlipMove>\n        {posts.map((post) => (\n          <Post\n            key={post.text}\n            displayName={post.displayName}\n            username={post.username}\n            verified={post.verified}\n            text={post.text}\n            avatar={post.avatar}\n            image={post.image}\n          />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default Feed;\n","import React from \"react\";\nimport \"./Widgets.css\";\nimport {\n\tTwitterTimelineEmbed,\n\tTwitterShareButton,\n\tTwitterTweetEmbed,\n} from \"react-twitter-embed\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nfunction Widgets() {\n\treturn (\n\t\t<div className='widgets'>\n\t\t\t<div className='widgets__input'>\n\t\t\t\t<SearchIcon className='widgets__searchIcon' />\n\t\t\t\t<input placeholder='Search Twitter' type='text' />\n\t\t\t</div>\n\n\t\t\t<div className='widgets__widgetContainer'>\n\t\t\t\t<h2>What's happening</h2>\n\n\t\t\t\t<TwitterTweetEmbed tweetId={\"1472510019354595331\"} />\n\n\t\t\t\t<TwitterTimelineEmbed\n\t\t\t\t\tsourceType='profile'\n\t\t\t\t\tscreenName='SSCORPIOWITHDO1'\n\t\t\t\t\toptions={{ height: 400 }}\n\t\t\t\t/>\n\n\t\t\t\t<TwitterShareButton\n\t\t\t\t\turl={\"https://www.facebook.com/s.l.char.4\"}\n\t\t\t\t\toptions={{ text: \"#Charvai\", via: \"charvai\" }}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Widgets;\n","import React from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Feed from \"./Feed\";\nimport Widgets from \"./Widgets\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<div className='app'>\n\t\t\t<Sidebar />\n\t\t\t<Feed />\n\t\t\t<Widgets />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}